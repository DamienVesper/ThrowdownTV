!(function (e, t) { typeof define === `function` && define.amd ? define([], t.bind(this, e, e.videojs)) : typeof module !== `undefined` && module.exports ? module.exports = t(e, e.videojs) : t(e, e.videojs); }(window, (e, t) => { "use strict"; e.videojs_hotkeys = { version: `0.2.16` }; t.registerPlugin(`hotkeys`, function (r) { const n = this; const o = n.el(); const l = document; const u = { volumeStep: 0.1, seekStep: 5, enableMute: !0, enableVolumeScroll: !0, enableFullscreen: !0, enableNumbers: !0, enableJogStyle: !1, alwaysCaptureHotkeys: !0, enableModifiersForNumbers: !0, playPauseKey: function (e) { return e.which === 32 || e.which === 179; }, rewindKey: function (e) { return e.which === 37 || e.which === 177; }, forwardKey: function (e) { return e.which === 39 || e.which === 176; }, volumeUpKey: function (e) { return e.which === 38; }, volumeDownKey: function (e) { return e.which === 40; }, muteKey: function (e) { return e.which === 77; }, fullscreenKey: function (e) { return e.which === 70; }, customKeys: {} }; t.options.blockKeys = !1; const a = t.mergeOptions || t.util.mergeOptions; const i = (r = a(u, r || {})).volumeStep; const c = r.seekStep; const s = (r.enableMute, r.enableVolumeScroll); const m = r.enableFullscreen; const f = r.enableNumbers; const v = r.enableJogStyle; const y = r.alwaysCaptureHotkeys; const b = r.enableModifiersForNumbers; o.hasAttribute(`tabIndex`) || o.setAttribute(`tabIndex`, `-1`), o.style.outline = `none`, !y && n.autoplay() || n.one(`play`, () => { o.focus(); }), n.on(`userinactive`, () => { const e = function () { clearTimeout(t); }; var t = setTimeout(() => { n.off(`useractive`, e), l.activeElement.parentElement == o.querySelector(`.vjs-control-bar`) && o.focus(); }, 10); n.one(`useractive`, e); }), n.on(`play`, () => { const e = o.querySelector(`.iframeblocker`); e && e.style.display === `` && (e.style.display = `block`, e.style.bottom = `39px`); }); const p = function (u) { let a; const s = u.which; if (u.preventDefault, n.controls()) { const p = l.activeElement; if (y || p == o || p == o.querySelector(`.vjs-tech`) || p == o.querySelector(`.vjs-control-bar`) || p == o.querySelector(`.iframeblocker`)) switch (h(u, n), h(u, n)) { case 1:u.preventDefault(), u.stopPropagation ? u.stopPropagation() : e.event && (e.event.cancelBubble = !0), n.paused() ? n.play() : n.pause(); break; case 2:if (u.preventDefault(), t.options.blockKeys) break; a = n.currentTime() - c, n.currentTime() <= c && (a = 0), n.currentTime(a); break; case 3:if (u.preventDefault(), t.options.blockKeys) break; n.currentTime(n.currentTime() + c); break; case 5:if (u.preventDefault(), t.options.blockKeys) break; v ? (a = n.currentTime() - 1, n.currentTime() <= 1 && (a = 0), n.currentTime(a)) : n.volume(n.volume() - i); break; case 4:if (u.preventDefault(), t.options.blockKeys) break; v ? n.currentTime(n.currentTime() + 1) : n.volume(n.volume() + i); break; case 6:u.preventDefault(), u.stopPropagation ? u.stopPropagation() : e.event && (e.event.cancelBubble = !0), n.muted(!n.muted()); break; case 7:m && (n.isFullscreen() ? n.exitFullscreen() : n.requestFullscreen()); break; default:if ((s > 47 && s < 59 || s > 95 && s < 106) && (b || !(u.metaKey || u.ctrlKey || u.altKey)) && f) { let d = 48; s > 95 && (d = 96); const k = s - d; u.preventDefault(), n.currentTime(n.duration() * k * 0.1); } for (const w in r.customKeys) { const K = r.customKeys[w]; K && K.key && K.handler && K.key(u) && (u.preventDefault(), K.handler(n, r)); } } } }; const d = function (t) { if (n.controls()) { const r = t.relatedTarget || t.toElement || l.activeElement; if ((y || r == o || r == o.querySelector(`.vjs-tech`) || r == o.querySelector(`.iframeblocker`) || r == o.querySelector(`.vjs-control-bar`)) && s) { t = e.event || t; const u = Math.max(-1, Math.min(1, t.wheelDelta || -t.detail)); t.preventDefault(), u == 1 ? n.volume(n.volume() + i) : u == -1 && n.volume(n.volume() - i); } } }; var h = function (e, t) { return r.playPauseKey(e, t) ? 1 : r.rewindKey(e, t) ? 2 : r.forwardKey(e, t) ? 3 : r.volumeUpKey(e, t) ? 4 : r.volumeDownKey(e, t) ? 5 : r.muteKey(e, t) ? 6 : r.fullscreenKey(e, t) ? 7 : void 0; }; return document.onkeydown = p, n.on(`keydown`, p), n.on(`dblclick`, (e) => { if (n.controls()) { const t = e.relatedTarget || e.toElement || l.activeElement; t != o && t != o.querySelector(`.vjs-tech`) && t != o.querySelector(`.iframeblocker`) || m && (n.isFullscreen() ? n.exitFullscreen() : n.requestFullscreen()); } }), n.on(`mousewheel`, d), n.on(`DOMMouseScroll`, d), this; }); }));
