/**
 * @license
 * Copyright (c) 2020 The Nuevodebel Team. All rights reserved.
 * Code distributed by Google as part of the Nuevodebel Team project is also
 * Version 1.0
 */
!(function (e, a) { typeof define === `function` && define.amd ? define([], a.bind(this, e, e.videojs)) : typeof module !== `undefined` && module.exports ? module.exports = a(e, e.videojs) : a(e, e.videojs); }(window, (e, a) => { "use strict"; e.videojs_dai = { version: `0.2` }; a.registerPlugin(`dai`, function (e) { let t; const i = this; const o = i.$(`.vjs-tech`); let d = !1; let n = (i.el(), new Array()); let r = !1; a.options.autoplay && (r = !0), o.getAttribute(`autoplay`) && (r = !0); const s = (a.mergeOptions || a.util.mergeOptions)({ fallback: ``, assetKey: ``, source_id: ``, video_id: ``, liveApiKey: ``, opaiKey: `` }, e || {}); function l () { (t = t = new google.ima.dai.api.StreamManager(o)).addEventListener(google.ima.dai.api.StreamEvent.Type.LOADED, c, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.ERROR, y, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.AD_PROGRESS, f, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED, E, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED, S, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.STARTED, _, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.FIRST_QUARTILE, v, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.MIDPOINT, m, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.THIRD_QUARTILE, u, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.COMPLETE, g, !1), t.addEventListener(google.ima.dai.api.StreamEvent.Type.CLICK, p, !1); } function v (e) { i.trigger(`dai`, { ad: n, type: `firstQuartile` }); } function m (e) { i.trigger(`dai`, { ad: n, type: `midpoint` }); } function u (e) { i.trigger(`dai`, { ad: n, type: `thirdQuartile` }); } function g (e) { i.trigger(`dai`, { ad: n, type: `complete` }); } function p (e) { i.trigger(`dai`, { ad: n, type: `adClick` }); } function c (e) { i.textTracks().on(`addtrack`, (e) => { const a = e.track; a.kind === `metadata` && a.on(`cuechange`, () => { const e = a.activeCues[0]; if (e && e.value.data) { const i = {}; i[e.value.key] = e.value.data, i.duration = 1 / 0, t.onTimedMetadata(i); } }); }), a.dom.addClass(i.el_, `vjs-dai`), i.src(e.getStreamData().url), r && i.play(); } function y (e) { s.fallback != `` && i.src(s.fallback); } function f (e) { if (d != 1) { const a = e.getStreamData().adProgressData; const t = a.adPosition; const o = a.totalAds; const n = a.currentTime; const r = a.duration; const s = Math.floor(r - n); i.controlBar.el_.querySelector(`.vjs-vast-label`).innerHTML = `Ad (${t} of ${o}) ${s}s`; } } function E (e) { T(!0); } function S (e) { n = `undefined`, T(!1); } function _ (e) { const a = e.getAd(); (n = new Array()).id = a.getAdId(), n.title = a.getTitle(), n.duration = a.getDuration(), n.url = a.g.g.u, i.trigger(`dai`, { ad: n, type: `started` }); } function T (e) { const t = i.controlBar.el_.querySelector(`.vjs-vast-label`); e ? (a.dom.addClass(i.el_, `vjs-dai`), d && (t.innerHTML = `Ad Playing`)) : (a.dom.removeClass(i.el_, `vjs-dai`), i.adPlaying = !1); } return i.ready(() => { l(), s.assetKey != `` ? (function () { d = !0; const e = new google.ima.dai.api.LiveStreamRequest(); e.assetKey = s.assetKey, e.apiKey = s.liveApiKey || ``, t.requestStream(e); }()) : s.source_id != `` && s.video_id != `` && (function () { d = !1; const e = new google.ima.dai.api.VODStreamRequest(); e.contentSourceId = s.source_id, e.videoId = s.video_id, e.apiKey = s.apiKey || ``, t.requestStream(e); }()); }), i.dai.requestVODStream = function (e) { d = !1, i.reset(), a.dom.removeClass(i.el_, `vjs-dai`), a.dom.removeClass(i.el_, `vjs-has-started`), a.dom.removeClass(i.el_, `vjs-playing`), a.dom.removeClass(i.bigPlayButton.el_, `vjs-no-pointer`), l(); const o = new google.ima.dai.api.VODStreamRequest(); o.contentSourceId = e.source_id, o.videoId = e.video_id, o.apiKey = e.apiKey || ``, t.requestStream(o); }, i.dai.requestLivetream = function (e) { d = !0, i.reset(), a.dom.removeClass(i.el_, `vjs-dai`), a.dom.removeClass(i.el_, `vjs-has-started`), a.dom.removeClass(i.el_, `vjs-playing`), a.dom.removeClass(i.bigPlayButton.el_, `vjs-no-pointer`), l(); const o = new google.ima.dai.api.LiveStreamRequest(); o.assetKey = e.assetKey, o.apiKey = e.apiKey || ``, t.requestStream(o); }, this; }); }));
